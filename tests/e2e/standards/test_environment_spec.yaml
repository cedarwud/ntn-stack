# NTN Stack 端到端測試環境規範
# 版本: v1.0.0
# 更新日期: 2024-12-01

metadata:
  version: "1.0.0"
  last_updated: "2024-12-01"
  description: "NTN Stack 系統端到端測試環境統一配置規範"
  maintainer: "NTN Stack Test Team"

# 硬體環境規範
hardware_requirements:
  minimum:
    description: "最低硬體需求"
    cpu:
      cores: 8
      frequency: "2.4GHz"
      architecture: "x86_64"
    memory:
      ram: "16GB"
      swap: "8GB"
    storage:
      system_disk: "100GB SSD"
      data_disk: "500GB"
      iops: ">= 1000"
    network:
      interfaces: 2
      bandwidth: "1Gbps"
      latency: "<= 1ms"
    gpu:
      required: true
      memory: "8GB"
      compute_capability: ">= 6.0"
      
  recommended:
    description: "推薦硬體配置"
    cpu:
      cores: 16
      frequency: "3.2GHz"
      architecture: "x86_64"
    memory:
      ram: "32GB"
      swap: "16GB"
    storage:
      system_disk: "250GB NVMe SSD"
      data_disk: "1TB NVMe SSD"
      iops: ">= 10000"
    network:
      interfaces: 4
      bandwidth: "10Gbps"
      latency: "<= 0.5ms"
    gpu:
      required: true
      memory: "16GB"
      compute_capability: ">= 7.0"
      
  high_performance:
    description: "高性能測試配置"
    cpu:
      cores: 32
      frequency: "4.0GHz"
      architecture: "x86_64"
    memory:
      ram: "64GB"
      swap: "32GB"
    storage:
      system_disk: "500GB NVMe SSD"
      data_disk: "2TB NVMe SSD"
      iops: ">= 50000"
    network:
      interfaces: 8
      bandwidth: "25Gbps"
      latency: "<= 0.1ms"
    gpu:
      required: true
      memory: "24GB"
      compute_capability: ">= 8.0"

# 軟體環境規範
software_requirements:
  operating_system:
    supported_distros:
      - "Ubuntu 20.04 LTS"
      - "Ubuntu 22.04 LTS"
      - "CentOS 8"
      - "RHEL 8"
    kernel_version: ">= 5.4"
    required_packages:
      - "docker.io"
      - "docker-compose"
      - "python3.8+"
      - "git"
      - "curl"
      - "wget"
      - "htop"
      - "iotop"
      - "netstat"
      
  container_runtime:
    docker:
      version: ">= 20.10"
      compose_version: ">= 1.29"
      buildx_enabled: true
      swarm_mode: "optional"
    kubernetes:
      version: ">= 1.20"
      required: false
      distributions: ["k3s", "microk8s", "kind"]
      
  programming_environments:
    python:
      version: ">= 3.8"
      virtual_env: "required"
      package_manager: "pip"
      required_packages:
        - "pytest"
        - "requests"
        - "pyyaml"
        - "numpy"
        - "pandas"
        - "matplotlib"
        - "prometheus-client"
        - "psutil"
    nodejs:
      version: ">= 14.0"
      package_manager: "npm"
      required: false
      
  monitoring_tools:
    prometheus:
      version: ">= 2.30"
      storage_retention: "7d"
      scrape_interval: "5s"
    grafana:
      version: ">= 8.0"
      plugins:
        - "grafana-clock-panel"
        - "grafana-piechart-panel"
    jaeger:
      version: ">= 1.25"
      required: false

# 網絡環境配置
network_configuration:
  physical_network:
    topology: "star"
    switch_requirements:
      ports: ">= 24"
      speed: "1Gbps+"
      vlan_support: true
      qos_support: true
    cable_requirements:
      type: "Cat6"
      length: "<= 100m"
      
  virtual_network:
    docker_networks:
      - name: "ntn-stack-network"
        driver: "bridge"
        subnet: "172.20.0.0/16"
        gateway: "172.20.0.1"
      - name: "monitoring-network"
        driver: "bridge"
        subnet: "172.21.0.0/16"
        gateway: "172.21.0.1"
    port_allocations:
      netstack_api: "8000-8099"
      simworld_api: "8100-8199"
      open5gs: "3000-3099"
      ueransim: "4000-4099"
      monitoring: "9000-9099"
      
  network_simulation:
    latency_control:
      tool: "tc"
      range: "1ms-2000ms"
      precision: "1ms"
    bandwidth_control:
      tool: "tc"
      range: "1Kbps-10Gbps"
      precision: "1Kbps"
    packet_loss:
      tool: "tc"
      range: "0-50%"
      precision: "0.01%"
    jitter:
      tool: "tc"
      range: "0-100ms"
      precision: "1ms"

# 測試數據管理
test_data_management:
  storage_structure:
    base_path: "/opt/ntn-stack/test-data"
    subdirectories:
      scenarios: "scenarios/"
      results: "results/"
      logs: "logs/"
      reports: "reports/"
      artifacts: "artifacts/"
      temporary: "temp/"
      
  data_retention:
    test_results: "30 days"
    performance_data: "90 days"
    error_logs: "180 days"
    debug_artifacts: "7 days"
    temporary_files: "1 day"
    
  backup_strategy:
    frequency: "daily"
    retention: "6 months"
    compression: "gzip"
    encryption: "AES-256"
    remote_backup: "optional"
    
  cleanup_policies:
    automatic_cleanup: true
    cleanup_schedule: "0 2 * * *"  # Daily at 2 AM
    disk_threshold: "80%"
    emergency_cleanup: "90%"

# 系統組件配置
system_components:
  ntn_stack:
    netstack:
      container_name: "ntn-netstack"
      image: "ntn-stack/netstack:latest"
      ports: ["8000:8000"]
      environment:
        - "ENVIRONMENT=test"
        - "LOG_LEVEL=DEBUG"
        - "DATABASE_URL=postgresql://test:test@postgres:5432/netstack_test"
      volumes:
        - "./data:/app/data"
        - "./logs:/app/logs"
      health_check:
        endpoint: "/health"
        interval: "30s"
        timeout: "10s"
        retries: 3
        
    simworld:
      container_name: "ntn-simworld"
      image: "ntn-stack/simworld:latest"
      ports: ["8100:8100"]
      environment:
        - "ENVIRONMENT=test"
        - "LOG_LEVEL=DEBUG"
        - "SIONNA_GPU_ENABLED=true"
      volumes:
        - "./sim-data:/app/sim-data"
        - "./models:/app/models"
      gpu_access: true
      health_check:
        endpoint: "/health"
        interval: "30s"
        timeout: "10s"
        retries: 3
        
  open5gs:
    components:
      amf:
        container_name: "open5gs-amf"
        ports: ["38412:38412"]
        config_path: "./configs/open5gs/amf.yaml"
      smf:
        container_name: "open5gs-smf"
        ports: ["8805:8805"]
        config_path: "./configs/open5gs/smf.yaml"
      upf:
        container_name: "open5gs-upf"
        ports: ["8806:8806"]
        config_path: "./configs/open5gs/upf.yaml"
      nrf:
        container_name: "open5gs-nrf"
        ports: ["7777:7777"]
        config_path: "./configs/open5gs/nrf.yaml"
        
  ueransim:
    gnb:
      container_name: "ueransim-gnb"
      config_path: "./configs/ueransim/gnb.yaml"
      mcc: "999"
      mnc: "70"
      tac: 1
    ue:
      container_name: "ueransim-ue"
      config_path: "./configs/ueransim/ue.yaml"
      count: 1
      imsi_base: "999700000000001"
      
  monitoring:
    prometheus:
      container_name: "prometheus"
      image: "prom/prometheus:latest"
      ports: ["9090:9090"]
      config_path: "./configs/prometheus/prometheus.yml"
      storage_retention: "7d"
    grafana:
      container_name: "grafana"
      image: "grafana/grafana:latest"
      ports: ["3000:3000"]
      dashboard_path: "./configs/grafana/dashboards"
      
  databases:
    postgresql:
      container_name: "postgres"
      image: "postgres:13"
      ports: ["5432:5432"]
      environment:
        - "POSTGRES_DB=ntn_test"
        - "POSTGRES_USER=test"
        - "POSTGRES_PASSWORD=test"
      volumes:
        - "postgres_data:/var/lib/postgresql/data"
    redis:
      container_name: "redis"
      image: "redis:6"
      ports: ["6379:6379"]
      volumes:
        - "redis_data:/data"

# 測試環境配置模板
environment_templates:
  minimal:
    description: "最小測試環境"
    components: ["netstack", "simworld", "postgres"]
    resource_allocation:
      cpu_limit: "4 cores"
      memory_limit: "8GB"
      storage_limit: "50GB"
    network_simulation: false
    monitoring: "basic"
    
  standard:
    description: "標準測試環境"
    components: ["netstack", "simworld", "open5gs", "ueransim", "postgres", "redis"]
    resource_allocation:
      cpu_limit: "8 cores"
      memory_limit: "16GB"
      storage_limit: "200GB"
    network_simulation: true
    monitoring: "full"
    
  comprehensive:
    description: "完整測試環境"
    components: ["all"]
    resource_allocation:
      cpu_limit: "16 cores"
      memory_limit: "32GB"
      storage_limit: "500GB"
    network_simulation: true
    monitoring: "advanced"
    load_testing: true
    
  performance:
    description: "性能測試環境"
    components: ["all"]
    resource_allocation:
      cpu_limit: "32 cores"
      memory_limit: "64GB"
      storage_limit: "1TB"
    network_simulation: true
    monitoring: "performance"
    load_testing: true
    stress_testing: true

# 環境驗證檢查
validation_checks:
  system_requirements:
    checks:
      - name: "cpu_cores"
        command: "nproc"
        expected: ">= 8"
      - name: "memory_total"
        command: "free -m | awk 'NR==2{print $2}'"
        expected: ">= 16000"
      - name: "disk_space"
        command: "df -BG / | awk 'NR==2{print $4}' | sed 's/G//'"
        expected: ">= 100"
      - name: "docker_version"
        command: "docker --version | grep -oP '\\d+\\.\\d+'"
        expected: ">= 20.10"
        
  network_connectivity:
    checks:
      - name: "internet_access"
        command: "ping -c 1 8.8.8.8"
        expected: "success"
      - name: "dns_resolution"
        command: "nslookup google.com"
        expected: "success"
      - name: "docker_registry"
        command: "docker pull hello-world"
        expected: "success"
        
  component_health:
    checks:
      - name: "netstack_api"
        endpoint: "http://localhost:8000/health"
        expected_status: 200
        timeout: "10s"
      - name: "simworld_api"
        endpoint: "http://localhost:8100/health"
        expected_status: 200
        timeout: "10s"
      - name: "prometheus"
        endpoint: "http://localhost:9090/-/healthy"
        expected_status: 200
        timeout: "5s"
      - name: "grafana"
        endpoint: "http://localhost:3000/api/health"
        expected_status: 200
        timeout: "5s"

# 故障排除指南
troubleshooting:
  common_issues:
    docker_permission_denied:
      description: "Docker 權限拒絕錯誤"
      symptoms: ["permission denied while trying to connect to Docker"]
      solutions:
        - "sudo usermod -aG docker $USER"
        - "newgrp docker"
        - "sudo systemctl restart docker"
        
    insufficient_memory:
      description: "記憶體不足"
      symptoms: ["OOMKilled", "container exits with code 137"]
      solutions:
        - "增加系統記憶體"
        - "調整容器記憶體限制"
        - "優化應用程式記憶體使用"
        
    port_conflicts:
      description: "端口衝突"
      symptoms: ["bind: address already in use"]
      solutions:
        - "檢查端口使用: netstat -tulnp"
        - "停止衝突服務"
        - "修改容器端口配置"
        
    gpu_access_denied:
      description: "GPU 訪問被拒絕"
      symptoms: ["CUDA device not found", "GPU not accessible"]
      solutions:
        - "安裝 NVIDIA Docker runtime"
        - "檢查 GPU 驅動程式"
        - "驗證 CUDA 安裝"
        
  diagnostic_commands:
    system_status:
      - "docker ps -a"
      - "docker logs <container_name>"
      - "docker stats"
      - "free -h"
      - "df -h"
      - "top"
      
    network_diagnosis:
      - "netstat -tulnp"
      - "docker network ls"
      - "docker network inspect <network_name>"
      - "ping <target_ip>"
      - "telnet <host> <port>"
      
    performance_analysis:
      - "iostat -x 1"
      - "sar -u 1 10"
      - "nvidia-smi"
      - "docker stats --no-stream"

# 安全配置
security_configuration:
  access_control:
    user_permissions:
      docker_group: "required"
      sudo_access: "limited"
      file_permissions: "restrictive"
    network_security:
      firewall_rules: "restrictive"
      port_exposure: "minimal"
      ssl_certificates: "self_signed_ok"
      
  data_protection:
    encryption_at_rest: "optional"
    encryption_in_transit: "recommended"
    sensitive_data_masking: "required"
    audit_logging: "enabled"
    
  container_security:
    user_namespace: "enabled"
    apparmor_profiles: "default"
    seccomp_profiles: "default"
    capabilities_drop: "ALL"
    read_only_root: "where_possible"

# 擴展配置
extension_points:
  custom_components:
    location: "tests/e2e/custom_components/"
    config_template: "component_template.yaml"
    health_check_required: true
    
  environment_plugins:
    location: "tests/e2e/plugins/environment/"
    interface: "EnvironmentPlugin"
    lifecycle_hooks: ["pre_setup", "post_setup", "pre_teardown", "post_teardown"]
    
  external_integrations:
    cloud_providers: ["AWS", "GCP", "Azure"]
    ci_cd_systems: ["Jenkins", "GitLab CI", "GitHub Actions"]
    monitoring_systems: ["DataDog", "New Relic", "Splunk"] 