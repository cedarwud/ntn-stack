# 階段四測試專用Makefile
# 提供多種測試執行方式

.PHONY: help setup-venv test-container test-venv test-docker-dedicated clean

# 變數定義
VENV_DIR := venv
PYTHON := python3.11
PIP := $(VENV_DIR)/bin/pip
PYTHON_VENV := $(VENV_DIR)/bin/python
CONTAINER_NAME := simworld_backend
TEST_CONTAINER_NAME := ntn-stage4-testing

help: ## 顯示測試幫助信息
	@echo "🧪 階段四測試執行選項："
	@echo ""
	@echo "📦 容器內測試（推薦）："
	@echo "  test-container       在SimWorld容器內執行測試"
	@echo "  test-docker-dedicated 使用專用測試容器"
	@echo ""
	@echo "🐍 虛擬環境測試："  
	@echo "  setup-venv          創建Python虛擬環境"
	@echo "  test-venv           在虛擬環境中執行測試"
	@echo ""
	@echo "🧹 清理："
	@echo "  clean               清理測試環境"

# ===========================================
# 方案1: 在SimWorld容器內執行（推薦）
# ===========================================

test-container: ## 在SimWorld容器內執行測試
	@echo "🐳 在SimWorld容器內執行階段四測試..."
	@if ! docker ps | grep -q $(CONTAINER_NAME); then \
		echo "❌ $(CONTAINER_NAME) 容器未運行，請先啟動：make simworld-start"; \
		exit 1; \
	fi
	@echo "✅ 容器已運行，開始測試..."
	$(PYTHON) docker_test_runner.py

# ===========================================
# 方案2: 專用測試容器
# ===========================================

build-test-container: ## 構建專用測試容器
	@echo "🔨 構建階段四專用測試容器..."
	docker build -f Dockerfile.testing -t ntn-stage4-testing ..

test-docker-dedicated: build-test-container ## 使用專用測試容器執行測試
	@echo "🚀 使用專用測試容器執行測試..."
	docker-compose -f docker-compose.testing.yml up --build --abort-on-container-exit
	docker-compose -f docker-compose.testing.yml down

# ===========================================
# 方案3: Python虛擬環境
# ===========================================

setup-venv: ## 創建Python虛擬環境
	@echo "🐍 創建Python虛擬環境..."
	@if [ ! -d "$(VENV_DIR)" ]; then \
		$(PYTHON) -m venv $(VENV_DIR); \
		echo "✅ 虛擬環境已創建"; \
	else \
		echo "ℹ️ 虛擬環境已存在"; \
	fi
	@echo "📦 安裝依賴套件..."
	$(PIP) install --upgrade pip
	$(PIP) install -r ../requirements.txt
	$(PIP) install -r ../simworld/backend/requirements.txt
	$(PIP) install aiohttp httpx pytest pytest-asyncio
	@echo "✅ 虛擬環境設置完成"

test-venv: setup-venv ## 在虛擬環境中執行測試
	@echo "🧪 在虛擬環境中執行階段四測試..."
	$(PYTHON_VENV) stage4_quick_test.py
	$(PYTHON_VENV) real_api_integration_test.py

# ===========================================
# 檢查和診斷
# ===========================================

check-python-versions: ## 檢查可用的Python版本
	@echo "🔍 檢查Python版本："
	@echo "主機Python："
	@which python3 && python3 --version || echo "  python3 not found"
	@which python3.11 && python3.11 --version || echo "  python3.11 not found"
	@which python3.8 && python3.8 --version || echo "  python3.8 not found"
	@echo ""
	@echo "容器內Python："
	@docker exec $(CONTAINER_NAME) python --version 2>/dev/null || echo "  容器未運行或無法訪問"

check-dependencies: ## 檢查依賴套件狀態
	@echo "📦 檢查依賴套件："
	@echo "主機環境："
	@python3 -c "import matplotlib; print('✅ matplotlib')" 2>/dev/null || echo "❌ matplotlib"
	@python3 -c "import pandas; print('✅ pandas')" 2>/dev/null || echo "❌ pandas"
	@python3 -c "import scipy; print('✅ scipy')" 2>/dev/null || echo "❌ scipy"
	@echo ""
	@echo "容器環境："
	@docker exec $(CONTAINER_NAME) python -c "import matplotlib; print('✅ matplotlib')" 2>/dev/null || echo "❌ matplotlib"
	@docker exec $(CONTAINER_NAME) python -c "import pandas; print('✅ pandas')" 2>/dev/null || echo "❌ pandas"
	@docker exec $(CONTAINER_NAME) python -c "import scipy; print('✅ scipy')" 2>/dev/null || echo "❌ scipy"

diagnose: check-python-versions check-dependencies ## 完整環境診斷
	@echo ""
	@echo "📊 建議的測試執行方式："
	@echo "1. 🥇 推薦：make test-container    (使用已有的SimWorld容器)"
	@echo "2. 🥈 備選：make test-venv         (創建獨立虛擬環境)"  
	@echo "3. 🥉 進階：make test-docker-dedicated (專用測試容器)"

# ===========================================
# 清理
# ===========================================

clean: ## 清理測試環境
	@echo "🧹 清理測試環境..."
	@if [ -d "$(VENV_DIR)" ]; then \
		rm -rf $(VENV_DIR); \
		echo "✅ 虛擬環境已清理"; \
	fi
	@if docker images | grep -q ntn-stage4-testing; then \
		docker rmi ntn-stage4-testing; \
		echo "✅ 測試容器映像已清理"; \
	fi
	@if [ -d "results" ]; then \
		echo "ℹ️ 保留測試結果目錄：results/"; \
	fi