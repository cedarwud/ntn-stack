[tool:pytest]
minversion = 7.0
asyncio_mode = auto

# Test discovery paths
testpaths = .

# Test file patterns
python_files = test_*.py *_test.py
python_functions = test_*
python_classes = Test*

# Output and reporting options
addopts = 
    -v
    --tb=short
    --strict-markers
    --durations=10

# Coverage settings
[coverage:run]
source = .
omit = 
    */tests/*
    */test_*
    */conftest.py
    */venv/*
    */node_modules/*
    */__pycache__/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Test markers
markers =
    unit: Unit tests - isolated component testing
    integration: Integration tests - service-to-service testing
    e2e: End-to-end tests - full workflow testing
    performance: Performance tests - load and stress testing
    slow: Slow running tests (>10 seconds)
    critical: Critical functionality tests that must pass
    network: Tests requiring network access
    database: Tests requiring database access
    docker: Tests requiring Docker environment
    backend: SimWorld backend tests
    frontend: SimWorld frontend tests
    netstack: NetStack API tests
    smoke: Smoke tests - basic functionality verification
    regression: Regression tests - prevent functionality breaks
    security: Security-related tests
    ai: AI/ML related tests
    rl: Reinforcement learning tests
    satellite: Satellite-related tests
    handover: Handover mechanism tests
    interference: Interference detection/mitigation tests
    health: Health monitoring tests
    api: API-related tests

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Log file settings
log_file = ../reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:urllib3
    ignore::ResourceWarning

# Timeout settings (in seconds)
timeout = 300
timeout_method = thread

# Parallel execution settings
[tool:pytest-xdist]
# Number of workers for parallel execution
# Use -n auto to auto-detect CPU cores
# Use -n <number> for specific worker count
workers = auto

# Test selection aliases
[aliases]
fast = "unit and not slow"
critical = "critical"
backend-only = "backend"
frontend-only = "frontend"
netstack-only = "netstack"
no-network = "not network"
no-docker = "not docker"