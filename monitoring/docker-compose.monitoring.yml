# Docker Compose 監控堆疊
# 階段8：系統監控與營運整合
# 包含：Prometheus + Grafana + AlertManager + Node Exporter

version: '3.8'

networks:
  monitoring:
    driver: bridge
    name: ntn-monitoring
  netstack-core:
    external: true
    name: compose_netstack-core
  sionna-net:
    external: true
    name: simworld_sionna-net

volumes:
  prometheus_data:
    name: ntn_prometheus_data
  grafana_data:
    name: ntn_grafana_data
  alertmanager_data:
    name: ntn_alertmanager_data

services:
  # Prometheus - 核心監控數據收集
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: ntn-prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - ./prometheus/alerts:/etc/prometheus/alerts:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
    networks:
      - monitoring
      - netstack-core
      - sionna-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - 視覺化儀表板
  grafana:
    image: grafana/grafana:10.1.0
    container_name: ntn-grafana
    hostname: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      # 基本配置
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=ntn-admin-2024
      - GF_SECURITY_SECRET_KEY=ntn-grafana-secret-key-2024
      
      # 外部URL配置
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      
      # 資料來源配置
      - GF_DATASOURCES_DEFAULT_NAME=Prometheus
      
      # 用戶管理
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Editor
      
      # 日誌配置
      - GF_LOG_LEVEL=info
      - GF_LOG_MODE=console
      
      # 插件安裝
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,camptocamp-prometheus-alertmanager-datasource
      
      # 匿名訪問配置
      - GF_AUTH_ANONYMOUS_ENABLED=false
      
      # Dashboard配置
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/ntn-overview.json
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager - 告警管理
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: ntn-alertmanager
    hostname: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./alertmanager/templates:/etc/alertmanager/templates:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - 系統指標收集
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: ntn-node-exporter
    hostname: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.textfile.directory=/var/lib/node_exporter/textfile_collector'
    networks:
      - monitoring
    restart: unless-stopped
    privileged: true

  # cAdvisor - 容器指標收集
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: ntn-cadvisor
    hostname: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    command:
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--event_storage_event_limit=default=0'
      - '--event_storage_age_limit=default=0'
      - '--store_container_labels=false'
      - '--global_housekeeping_interval=30s'
      - '--disable_metrics=accelerator,cpu_topology,disk,memory_numa,tcp,udp,percpu,sched,process,hugetlb,referenced_memory,resctrl,cpuset'
    networks:
      - monitoring
    restart: unless-stopped

  # Redis Exporter - 針對 NetStack 的 Redis 監控
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: ntn-redis-exporter
    hostname: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=netstack-redis:6379
      - REDIS_PASSWORD=
    networks:
      - monitoring
      - netstack-core
    restart: unless-stopped
    depends_on:
      - prometheus

  # Postgres Exporter - 針對 SimWorld 的 PostgreSQL 監控
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: ntn-postgres-exporter
    hostname: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://sat:123@simworld_postgis:5432/ntn_stack?sslmode=disable
    networks:
      - monitoring
      - sionna-net
    restart: unless-stopped
    depends_on:
      - prometheus

# 健康檢查和狀態監控
  monitoring-health:
    image: alpine:3.18
    container_name: ntn-monitoring-health
    volumes:
      - ./scripts/health-check.sh:/health-check.sh:ro
    command: sh -c "chmod +x /health-check.sh && /health-check.sh"
    networks:
      - monitoring
    restart: "no"
    depends_on:
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
      alertmanager:
        condition: service_healthy