# SimWorld Docker Compose 配置模板
# 環境: {{ config.environment.value }}
# GPU 支援: {{ "啟用" if config.gpu_enabled else "停用" }}

services:
  postgis:
    image: postgis/postgis:16-3.4
    container_name: simworld_postgis
    environment:
      POSTGRES_USER: {{ config.custom_vars.get("POSTGRES_USER", "simworld_user") }}
      POSTGRES_PASSWORD: {{ config.custom_vars.get("POSTGRES_PASSWORD", "simworld_pass") }}
      POSTGRES_DB: {{ config.custom_vars.get("POSTGRES_DB", "simworld_db") }}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      {% if config.backup_enabled %}
      - backup_storage:/backup
      {% endif %}
    ports:
      - '5432:5432'
    networks:
      - sionna-net
    restart: unless-stopped
    {% if config.resources %}
    deploy:
      resources:
        limits:
          cpus: '{{ config.resources.cpu_limit }}'
          memory: {{ config.resources.memory_limit }}
        reservations:
          cpus: '0.5'
          memory: 512M
    {% endif %}
    {% if config.health_check_enabled %}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    {% endif %}

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT={{ config.environment.value }}
        {% if config.gpu_enabled %}
        - ENABLE_GPU=true
        {% endif %}
    container_name: simworld_backend
    ports:
      - '8888:8000'
    volumes:
      - ./backend:/app
      {% if config.backup_enabled %}
      - backup_storage:/app/backup
      {% endif %}
    environment:
      # 基本設定
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT={{ config.environment.value }}
      - DEPLOYMENT_ENV={{ config.environment.value }}
      
      # GPU/CPU 模式設定
      {% if config.gpu_enabled %}
      - CUDA_VISIBLE_DEVICES=0
      {% else %}
      - CUDA_VISIBLE_DEVICES=-1
      {% endif %}
      
      # 渲染後端設定
      - PYOPENGL_PLATFORM={{ config.custom_vars.get("PYOPENGL_PLATFORM", "egl") }}
      - PYRENDER_BACKEND=pyglet
      
      # 資料庫連接
      - DATABASE_URL=postgresql+asyncpg://{{ config.custom_vars.get("POSTGRES_USER", "simworld_user") }}:{{ config.custom_vars.get("POSTGRES_PASSWORD", "simworld_pass") }}@postgis:5432/{{ config.custom_vars.get("POSTGRES_DB", "simworld_db") }}
      
      {% for key, value in config.custom_vars.items() %}
      {% if key not in ["POSTGRES_USER", "POSTGRES_PASSWORD", "POSTGRES_DB"] %}
      - {{ key }}={{ value }}
      {% endif %}
      {% endfor %}
    
    {% if config.gpu_enabled %}
    # GPU 支援配置
    deploy:
      resources:
        limits:
          cpus: '{{ config.resources.cpu_limit }}'
          memory: {{ config.resources.memory_limit }}
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    {% elif config.resources %}
    deploy:
      resources:
        limits:
          cpus: '{{ config.resources.cpu_limit }}'
          memory: {{ config.resources.memory_limit }}
        reservations:
          cpus: '1'
          memory: 1G
    {% endif %}
    
    networks:
      - sionna-net
      - netstack-core
    
    depends_on:
      {% if config.health_check_enabled %}
      postgis:
        condition: service_healthy
      {% else %}
      - postgis
      {% endif %}
    
    restart: unless-stopped
    
    {% if config.health_check_enabled %}
    healthcheck:
      test: ['CMD-SHELL', 'python -c "import socket; s = socket.create_connection((\"localhost\", 8000), timeout=5)" || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    {% endif %}

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - ENVIRONMENT={{ config.environment.value }}
        - NODE_ENV={{ "production" if config.environment.value == "production" else "development" }}
    container_name: simworld_frontend
    ports:
      - '5173:5173'
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV={{ "production" if config.environment.value == "production" else "development" }}
      - VITE_API_URL=http://localhost:8888
      {% if config.environment.value == "development" %}
      - VITE_DEV_MODE=true
      {% endif %}
    networks:
      - sionna-net
    depends_on:
      {% if config.health_check_enabled %}
      backend:
        condition: service_healthy
      {% else %}
      - backend
      {% endif %}
    restart: unless-stopped
    {% if config.resources %}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    {% endif %}

  {% if config.monitoring_enabled %}
  # Redis for SimWorld caching
  redis:
    image: redis:7-alpine
    container_name: simworld_redis
    hostname: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      sionna-net:
        aliases:
          - redis
    restart: unless-stopped
    {% if config.resources %}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    {% endif %}
    {% if config.health_check_enabled %}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 10s
    {% endif %}
  {% endif %}

  {% if config.backup_enabled %}
  # 備份服務
  backup:
    image: alpine:latest
    container_name: simworld_backup
    volumes:
      - postgres_data:/source/postgres:ro
      - backup_storage:/backup
      - ./scripts/backup_simworld.sh:/backup.sh:ro
    command: sh -c "chmod +x /backup.sh && /backup.sh"
    networks:
      - sionna-net
    restart: "no"
    depends_on:
      {% if config.health_check_enabled %}
      postgis:
        condition: service_healthy
      {% else %}
      - postgis
      {% endif %}
  {% endif %}

networks:
  sionna-net:
    driver: bridge
  netstack-core:
    external: true
    name: compose_netstack-core

volumes:
  postgres_data:
    driver: local
  node_modules:
    driver: local
  {% if config.monitoring_enabled %}
  redis_data:
    driver: local
  {% endif %}
  {% if config.backup_enabled %}
  backup_storage:
    driver: local
  {% endif %} 