# docker-compose.yml
# GPU/CPU 模式換手指南:
# 1. 使用 CPU 模式: 設定 CUDA_VISIBLE_DEVICES="-1" 且註釋掉 deploy 部分
# 2. 使用 GPU 模式: 設定 CUDA_VISIBLE_DEVICES="" 或指定 GPU ID，並啟用 deploy 部分
# 3. 可選渲染後端: PYOPENGL_PLATFORM=egl (默認) 或 PYOPENGL_PLATFORM=osmesa 或 PYOPENGL_PLATFORM=glfw

services:
    # PostgreSQL 已移除 - 改用 NetStack MongoDB

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: simworld_backend # 給容器一個明確的名稱
        ports:
            - '8888:8000'
        volumes:
            - ./backend:/app
            - ../netstack/tle_data:/app/netstack/tle_data:ro  # Mount NetStack TLE data as read-only
            - satellite_precomputed_data:/app/data:ro  # Mount NetStack preprocessed data volume as read-only
        env_file:
            - ./backend/.env # 從 backend 目錄的 .env 讀取配置
        environment:
            # === 渲染和計算模式設定 ===
            # CPU 模式：設定為 "-1" 強制使用 CPU
            # GPU 模式：設定為 "" 或特定 GPU ID，如 "0" 或 "0,1"
            CUDA_VISIBLE_DEVICES: '-1'

            # === 渲染後端設定 ===
            # 支持三種模式：egl (默認), osmesa (純軟體), glfw (需要顯示器或虛擬顯示器)
            PYOPENGL_PLATFORM: 'egl'
            # 可選設定 pyrender 的後端
            PYRENDER_BACKEND: 'pyglet'

            # 其他通用設定
            PYTHONUNBUFFERED: '1'
            # 外部 IP 地址設定 (用於 CORS)
            EXTERNAL_IP: ${EXTERNAL_IP:-127.0.0.1}
            # PostgreSQL 連接配置 (已移除 RL PostgreSQL)
            # DATABASE_URL: postgresql+asyncpg://localhost:5432/default_db
            # Redis 連接 URL (連接到 NetStack 的 Redis via network IP)
            REDIS_URL: redis://172.20.0.50:6379/0

        # === GPU 支持 (使用 GPU 模式時取消註釋) ===
        # deploy:
        #   resources:
        #     reservations:
        #       devices:
        #         - driver: nvidia
        #           count: all
        #           capabilities: [gpu]
        
        # === 網路配置 ===
        networks:
            - sionna-net
            - netstack-core  # 連接到 NetStack 網路以訪問 MongoDB
        
        # 移除 PostgreSQL 依賴 - MongoDB 在 NetStack 中管理
        # command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload # 開發時可取消註釋
        healthcheck: # <--- 新增 FastAPI 的 healthcheck
            # 嘗試連接 FastAPI 的根路徑 "/"。需要 curl。
            # test: ["CMD", "curl", "-f", "http://localhost:8000/"]
            # 或者，如果不想安裝 curl，可以嘗試用 python 簡易檢查端口 (需要 python 在基礎鏡像中)
            test:
                [
                    'CMD-SHELL',
                    'python -c ''import socket; s = socket.create_connection(("localhost", 8000), timeout=5)'' || exit 1',
                ]
            interval: 10s # 每 10 秒檢查一次
            timeout: 5s # 每次檢查超時 5 秒
            retries: 5 # 重試 5 次失敗後標記為不健康
            start_period: 30s # 啟動後等待 30 秒再開始健康檢查 (給 FastAPI 足夠的啟動時間)

    frontend:
        build:
            context: ./frontend
            dockerfile: Dockerfile
        container_name: simworld_frontend # 給容器一個明確的名稱
        ports:
            - '5173:5173'
        volumes:
            - satellite_precomputed_data:/app/public/data:ro  # 共享衛星數據 (只讀)
            - ./frontend:/app
            - node_modules:/app/node_modules
        environment:
            # Docker 環境標識
            VITE_ENV_MODE: docker
            # API 配置 - 在 Docker 中使用代理路徑
            VITE_NETSTACK_URL: /netstack
            VITE_SIMWORLD_URL: /api
            # Vite 代理目標配置
            VITE_NETSTACK_PROXY_TARGET: http://netstack-api:8080
            VITE_SIMWORLD_PROXY_TARGET: http://simworld_backend:8000
            # 開發配置
            VITE_PORT: 5173
            VITE_DEBUG: true
        networks:
            - sionna-net
            - netstack-core
        depends_on: # React 通常依賴 FastAPI
            backend: # <--- 修改依賴條件
                condition: service_healthy # 等待 backend 健康檢查通過

networks:
    sionna-net:
        driver: bridge
    netstack-core:
        external: true
        name: compose_netstack-core

volumes: # <-- Volume 定義
    satellite_precomputed_data:
        external: true
        name: compose_satellite_precomputed_data  # 引用 NetStack 創建的 volume
    node_modules:  # 移除 postgres_data - 不再需要
