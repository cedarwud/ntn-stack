networks:
  netstack-core:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # MongoDB 資料庫
  mongo:
    image: mongo:6.0
    container_name: netstack-mongo
    hostname: mongo
    environment:
      MONGO_INITDB_DATABASE: open5gs
    ports:
      - "27017:27017"  # 添加端口映射以便外部訪問
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      netstack-core:
        ipv4_address: 172.20.0.10
        aliases:
          - mongo
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NRF 服務必須先啟動
  nrf:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-nrf
    hostname: nrf
    command: open5gs-nrfd
    networks:
      netstack-core:
        ipv4_address: 172.20.0.23
        aliases:
          - nrf
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-nrfd"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  # SCP 服務必須在 NRF 之後啟動
  scp:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-scp
    hostname: scp
    command: open5gs-scpd
    environment:
      DB_URI: mongodb://mongo/open5gs
    depends_on:
      nrf:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.26
        aliases:
          - scp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-scpd"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Open5GS 核心網服務
  amf:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-amf
    hostname: amf
    volumes:
      - ../config/amf.yaml:/opt/open5gs/etc/open5gs/amf.yaml
    command: open5gs-amfd
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.3'
          memory: 256M
    depends_on:
      mongo:
        condition: service_healthy
      nrf:
        condition: service_healthy
      scp:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.20
        aliases:
          - amf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-amfd"]
      interval: 10s
      timeout: 5s
      retries: 5

  ausf:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-ausf
    hostname: ausf
    command: open5gs-ausfd
    depends_on:
      nrf:
        condition: service_healthy
      scp:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.21
        aliases:
          - ausf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-ausfd"]
      interval: 10s
      timeout: 5s
      retries: 3

  bsf:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-bsf
    hostname: bsf
    command: open5gs-bsfd
    depends_on:
      nrf:
        condition: service_healthy
      scp:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.22
        aliases:
          - bsf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-bsfd"]
      interval: 10s
      timeout: 5s
      retries: 3

  nssf:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-nssf
    hostname: nssf
    volumes:
      - ../config/nssf.yaml:/opt/open5gs/etc/open5gs/nssf.yaml
    command: open5gs-nssfd
    depends_on:
      nrf:
        condition: service_healthy
      scp:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.24
        aliases:
          - nssf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-nssfd"]
      interval: 10s
      timeout: 5s
      retries: 3

  pcf:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-pcf
    hostname: pcf
    command: open5gs-pcfd
    environment:
      DB_URI: mongodb://mongo/open5gs
    depends_on:
      mongo:
        condition: service_healthy
      nrf:
        condition: service_healthy
      scp:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.25
        aliases:
          - pcf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-pcfd"]
      interval: 10s
      timeout: 5s
      retries: 3

  smf:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-smf
    hostname: smf
    volumes:
      - ../config/smf.yaml:/opt/open5gs/etc/open5gs/smf.yaml
    command: open5gs-smfd
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    depends_on:
      nrf:
        condition: service_healthy
      scp:
        condition: service_healthy
      upf:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.27
        aliases:
          - smf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-smfd"]
      interval: 10s
      timeout: 5s
      retries: 3

  udm:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-udm
    hostname: udm
    command: open5gs-udmd
    depends_on:
      nrf:
        condition: service_healthy
      scp:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.28
        aliases:
          - udm
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-udmd"]
      interval: 10s
      timeout: 5s
      retries: 3

  udr:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-udr
    hostname: udr
    command: open5gs-udrd
    environment:
      DB_URI: mongodb://mongo/open5gs
    depends_on:
      mongo:
        condition: service_healthy
      nrf:
        condition: service_healthy
      scp:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.29
        aliases:
          - udr
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-udrd"]
      interval: 10s
      timeout: 5s
      retries: 3

  upf:
    image: gradiant/open5gs:2.7.5
    container_name: netstack-upf
    hostname: upf
    user: root
    command: open5gs-upfd
    cap_add:
      - all
    privileged: true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    ports:
      - "2152:2152/udp"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      netstack-core:
        ipv4_address: 172.20.0.30
        aliases:
          - upf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "open5gs-upfd"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Open5GS WebUI
  webui:
    image: gradiant/open5gs-webui:2.7.5
    container_name: netstack-webui
    environment:
      DB_URI: mongodb://mongo/open5gs
      NODE_ENV: production
    ports:
      - "9999:9999"
    depends_on:
      - mongo
    networks:
      netstack-core:
        ipv4_address: 172.20.0.40
    restart: unless-stopped

  # NetStack API 服務 - 使用預構建映像
  netstack-api:
    image: netstack-api:latest
    container_name: netstack-api
    entrypoint: ["/usr/local/bin/docker-entrypoint.sh"]
    command: ["python", "-m", "netstack_api.main"]
    environment:
      - DATABASE_URL=mongodb://mongo:27017/open5gs
      - MONGO_HOST=mongo
      - REDIS_URL=redis://redis:6379
      - SATELLITE_DATABASE_URL=postgresql://netstack_user:netstack_password@netstack-postgres:5432/netstack_db
      - LOG_LEVEL=info
      - ENVIRONMENT=production
      - SKIP_DATA_GENERATION=true  # Temporarily skip data generation to resolve startup issues
      # - SIMWORLD_API_URL=http://simworld_backend:8000  # Removed - using Phase0 preprocessing instead
      # Phase 5 容器啟動優化環境變數
      - SATELLITE_DATA_MODE=instant_load     # 啟動時立即載入
      - POSTGRES_WAIT_TIMEOUT=30             # 等待超時設定
      - PRECOMPUTE_ON_STARTUP=true           # 啟動時執行預計算
      - DOCKER_CONTAINER=true                # 容器環境標識，用於跨平台路徑處理
    volumes:
      # 🎯 F3/A1永久數據：Bind Mount到項目目錄
      - /home/sat/ntn-stack/data/leo_outputs:/app/data
      # 🔥 CRITICAL FIX: 掛載TLE數據目錄，確保載入8735顆真實衛星
      - ../tle_data:/app/tle_data:ro
      
      # 🚀 DEVELOPMENT SIMPLIFICATION: 整個代碼目錄掛載（如SimWorld設計）
      - ../src:/app/src
      - ../netstack_api:/app/netstack_api
      - ../scripts:/app/scripts
      - ../config:/app/config
      
      # Docker Volumes for generated content
      - netstack_models:/app/models
      - netstack_results:/app/results
    ports:
      - "8080:8080"
    depends_on:
      - mongo
      - redis
      - postgres
      - amf
      # Temporarily removed SMF dependency due to freeDiameter initialization issues
      # - smf
    networks:
      netstack-core:
        ipv4_address: 172.20.0.41
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s          # 增加檢查間隔
      timeout: 10s           # 增加單次超時
      retries: 20            # 大幅增加重試次數 (總計 10 分鐘)
      start_period: 300s     # 給予 5 分鐘的啟動寬限期



  # Redis 快取
  redis:
    image: redis:7-alpine
    container_name: netstack-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"  # 映射到主機，以便本地開發
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    volumes:
      - redis_data:/data
    networks:
      netstack-core:
        ipv4_address: 172.20.0.50
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL 衛星數據庫
  postgres:
    image: postgres:16-alpine
    container_name: netstack-postgres
    hostname: netstack-postgres
    environment:
      POSTGRES_DB: netstack_db
      POSTGRES_USER: netstack_user
      POSTGRES_PASSWORD: netstack_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"  # 映射到主機，以便本地開發
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.3'
          memory: 512M
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      netstack-core:
        ipv4_address: 172.20.0.51
        aliases:
          - postgres
          - netstack-postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netstack_user -d netstack_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # # Prometheus 監控
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: netstack-prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--web.console.libraries=/etc/prometheus/console_libraries'
  #     - '--web.console.templates=/etc/prometheus/consoles'
  #     - '--storage.tsdb.retention.time=200h'
  #     - '--web.enable-lifecycle'
  #   volumes:
  #     - ../config/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     netstack-core:
  #       ipv4_address: 172.20.0.60
  #   restart: unless-stopped

volumes:
  satellite_precomputed_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

  # prometheus_data:
  #   driver: local
  mongo_config:
    driver: local
  netstack_models:
    driver: local
  netstack_results:
    driver: local
  netstack_scripts:
    driver: local