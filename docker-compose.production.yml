# Phase 4: 生產環境 Docker Compose 配置
# 優化容器啟動性能，確保預計算數據即時可用

version: '3.8'

networks:
  ntn-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  netstack-data:
    driver: local
  simworld-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # NetStack API - 核心軌道計算服務
  netstack-api:
    build:
      context: ./netstack
      dockerfile: docker/Dockerfile
      args:
        - BUILD_ENV=production
        - PRECOMPUTE_ENABLED=true
    container_name: netstack-api-prod
    restart: unless-stopped
    environment:
      # Phase 0 預計算配置
      - PRECOMPUTED_DATA_ENABLED=true
      - ORBIT_CACHE_PRELOAD=true
      - PHASE0_DATA_PATH=/app/data
      - TLE_DATA_PATH=/app/tle_data
      
      # 性能優化
      - UVICORN_WORKERS=4
      - UVICORN_HOST=0.0.0.0
      - UVICORN_PORT=8080
      - UVICORN_LOG_LEVEL=info
      - PYTHONUNBUFFERED=1
      
      # 監控配置
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_INTERVAL=5
      
      # 生產環境配置
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics
    volumes:
      - netstack-data:/app/data
      - ./netstack/tle_data:/app/tle_data:ro
      - ./test_output:/app/test_output:ro
    networks:
      - ntn-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/satellites/health/precomputed"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    depends_on:
      - redis-cache

  # SimWorld Backend - 前端 API 服務
  simworld-backend:
    build:
      context: ./simworld/backend
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    container_name: simworld-backend-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - NETSTACK_API_URL=http://netstack-api:8080
      - REDIS_URL=redis://redis-cache:6379
      - DATABASE_URL=postgresql://simworld:simworld_pass@postgres:5432/simworld_prod
      - CORS_ORIGINS=http://localhost:3000,http://simworld-frontend:3000
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - simworld-data:/app/data
    networks:
      - ntn-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      netstack-api:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  # SimWorld Frontend - React 應用
  simworld-frontend:
    build:
      context: ./simworld/frontend
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
        - REACT_APP_API_URL=http://localhost:8000
        - REACT_APP_NETSTACK_URL=http://localhost:8080
    container_name: simworld-frontend-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - ntn-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - simworld-backend

  # Redis - 快取服務
  redis-cache:
    image: redis:7-alpine
    container_name: redis-cache-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    networks:
      - ntn-production
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL - 數據庫
  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=simworld_prod
      - POSTGRES_USER=simworld
      - POSTGRES_PASSWORD=simworld_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./simworld/backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ntn-production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U simworld -d simworld_prod"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Prometheus - 監控數據收集
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ntn-production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana - 監控儀表板
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ntn-production
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - prometheus

  # Nginx - 反向代理和負載均衡
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ntn-production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - netstack-api
      - simworld-backend
      - simworld-frontend

  # 日誌收集器
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: fluentd-prod
    restart: unless-stopped
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/var/log/containers
    networks:
      - ntn-production
    ports:
      - "24224:24224"
    environment:
      - FLUENTD_CONF=fluent.conf
    depends_on:
      - netstack-api
      - simworld-backend
