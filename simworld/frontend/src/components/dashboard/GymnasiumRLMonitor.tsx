import React, { useState, useEffect, useCallback, useRef } from 'react'
import './GymnasiumRLMonitor.scss'

interface RLEngineMetrics {
    engine_type: 'dqn' | 'ppo' | 'null'
    algorithm: string
    environment: string
    model_status: 'training' | 'inference' | 'idle' | 'error'
    episodes_completed: number
    average_reward: number
    current_epsilon: number
    training_progress: number
    prediction_accuracy: number
    response_time_ms: number
    memory_usage: number
    gpu_utilization?: number
}

// Note: Removed unused interfaces EnvironmentState and DecisionHistory
// They can be re-added when needed for future features

// ÂÆöÁæ©ÁúüÂØ¶APIÁ´ØÈªûÁöÑÂü∫Á§éURL - ÈÄöÈÅéVite‰ª£ÁêÜË®™Âïè
const API_BASE = '/netstack'

const GymnasiumRLMonitor: React.FC = () => {
    const [rlMetrics, setRLMetrics] = useState<RLEngineMetrics | null>(null)

    const [selectedEngine, setSelectedEngine] = useState<'dqn' | 'ppo'>('dqn')
    const [isTraining, setIsTraining] = useState(false)
    const [autoRefresh, setAutoRefresh] = useState(true)
    const [loading, setLoading] = useState(false)
    const [error, setError] = useState<string | null>(null)
    const [backendConnected, setBackendConnected] = useState(false)
    const [connectionError, setConnectionError] = useState<string | null>(null)
    const [startTime, setStartTime] = useState<number | null>(null)
    const intervalRef = useRef<NodeJS.Timeout | null>(null)

    // Áç≤Âèñ RL Á≥ªÁµ±ÁãÄÊÖã - ‰ΩøÁî®ÁúüÂØ¶API
    const fetchRLStatus = useCallback(async () => {
        setLoading(true)
        setError(null)

        try {
            // 1. Áç≤ÂèñRLÁãÄÊÖã
            const rlStatusResponse = await fetch(`${API_BASE}/api/v1/rl/status`)
            if (!rlStatusResponse.ok) {
                throw new Error('ÁÑ°Ê≥ïÁç≤ÂèñRLÁãÄÊÖã')
            }
            const rlStatusData = await rlStatusResponse.json()

            // 2. Áç≤ÂèñAIÊ±∫Á≠ñÁãÄÊÖã
            const aiStatusResponse = await fetch(
                `${API_BASE}/api/v1/ai-decision/status`
            )
            let aiStatusData = null
            if (aiStatusResponse.ok) {
                aiStatusData = await aiStatusResponse.json()
            }

            // 3. Áç≤ÂèñË®ìÁ∑¥ÊúÉË©±ÁãÄÊÖã
            const sessionsResponse = await fetch(
                `${API_BASE}/api/v1/rl/training/sessions`
            )
            let sessionsData = { sessions: [] }
            if (sessionsResponse.ok) {
                sessionsData = await sessionsResponse.json()
            }

            // 4. ÂêàÊàêRLÊåáÊ®ôÊï∏Êìö
            const metrics: RLEngineMetrics = {
                engine_type: selectedEngine,
                algorithm:
                    selectedEngine === 'dqn'
                        ? 'Deep Q-Network'
                        : 'Proximal Policy Optimization',
                environment:
                    aiStatusData?.environment_name || 'HandoverEnvironment-v0',
                model_status:
                    sessionsData.sessions.length > 0
                        ? isTraining
                            ? 'training'
                            : 'inference'
                        : 'idle',
                episodes_completed:
                    aiStatusData?.training_stats?.episodes_completed || 0,
                average_reward:
                    aiStatusData?.training_stats?.average_reward || 0,
                current_epsilon:
                    aiStatusData?.training_stats?.current_epsilon || 0.1,
                training_progress:
                    aiStatusData?.training_stats?.training_progress || 0,
                prediction_accuracy: aiStatusData?.prediction_accuracy || 0.85,
                response_time_ms:
                    rlStatusData.system_resources?.avg_response_time || 25,
                memory_usage:
                    rlStatusData.system_resources?.memory_usage_mb || 1024,
                gpu_utilization:
                    rlStatusData.system_resources?.gpu_utilization || 0,
            }

            setRLMetrics(metrics)
        } catch (error) {
            console.error('Failed to fetch RL status:', error)
            setError(error instanceof Error ? error.message : 'Áç≤ÂèñRLÁãÄÊÖãÂ§±Êïó')
        } finally {
            setLoading(false)
        }
    }, [selectedEngine, isTraining])

    // ÁîüÊàêÂãïÊÖãË®ìÁ∑¥Êï∏Êìö
    const generateDynamicTrainingData = useCallback(() => {
        if (isTraining) {
            const now = Date.now()
            const elapsed = Math.floor((now - (startTime || now)) / 1000)

            // Âü∫ÊñºË®ìÁ∑¥ÊôÇÈñìÁîüÊàêÈÄêÊº∏Â¢ûÈï∑ÁöÑÊåáÊ®ô
            const baseEpisodes = Math.floor(elapsed / 10) // ÊØè10ÁßíÂ¢ûÂä†1ÂÄãepisode
            const baseReward = Math.max(
                0,
                Math.sin(elapsed / 100) * 50 + Math.random() * 10
            )
            const baseProgress = Math.min(100, (elapsed / 600) * 100) // 10ÂàÜÈêòÈÅîÂà∞100%

            return {
                episodes_completed: baseEpisodes,
                average_reward: baseReward,
                current_epsilon: Math.max(0.01, 1.0 - elapsed / 3600), // 1Â∞èÊôÇÂÖßÂæû1.0ÈôçÂà∞0.01
                training_progress: baseProgress,
                prediction_accuracy: 0.6 + (baseProgress / 100) * 0.35, // 60%Âà∞95%
                response_time_ms: 20 + Math.random() * 30,
                memory_usage: 512 + (baseProgress / 100) * 1024, // 512MBÂà∞1.5GB
                gpu_utilization: isTraining ? 45 + Math.random() * 40 : 0,
            }
        }
        return null
    }, [isTraining, startTime])

    // Ê™¢Êü•ÂæåÁ´ØÈÄ£Êé•ÁãÄÊÖã
    const checkBackendConnection = useCallback(async () => {
        try {
            const response = await fetch(`${API_BASE}/health`, {
                method: 'GET',
                timeout: 5000, // 5ÁßíË∂ÖÊôÇ
            } as RequestInit)

            if (response.ok) {
                const data = await response.json()
                setBackendConnected(true)
                setConnectionError(null)
                return true
            } else {
                throw new Error(
                    `HTTP ${response.status}: ${response.statusText}`
                )
            }
        } catch (error) {
            setBackendConnected(false)
            setConnectionError(
                error instanceof Error ? error.message : 'ÈÄ£Êé•Â§±Êïó'
            )
            console.warn('ÂæåÁ´ØÈÄ£Êé•Â§±ÊïóÔºå‰ΩøÁî®Ê®°Êì¨Êï∏Êìö:', error)
            return false
        }
    }, [])

    // ÂàùÂßãÂåñÊôÇÊ™¢Êü•ÈÄ£Êé•
    useEffect(() => {
        checkBackendConnection()
    }, [checkBackendConnection])

    // ÂàáÊèõ RL ÂºïÊìé
    const switchEngine = async (newEngine: 'dqn' | 'ppo') => {
        try {
            const endpoint =
                newEngine === 'dqn'
                    ? `${API_BASE}/api/v1/ai-decision/switch-to-gymnasium`
                    : `${API_BASE}/api/v1/ai-decision/switch-to-legacy`

            const response = await fetch(endpoint, { method: 'POST' })

            if (response.ok) {
                setSelectedEngine(newEngine)
                console.log(`Switched to ${newEngine} engine`)
                // Á´ãÂç≥Âà∑Êñ∞ÁãÄÊÖã
                setTimeout(fetchRLStatus, 1000)
            } else {
                throw new Error(`ÂàáÊèõÂà∞ ${newEngine} ÂºïÊìéÂ§±Êïó`)
            }
        } catch (error) {
            console.error('Failed to switch engine:', error)
            setError(error instanceof Error ? error.message : 'ÂàáÊèõÂºïÊìéÂ§±Êïó')
        }
    }

    // ÈñãÂßã/ÂÅúÊ≠¢Ë®ìÁ∑¥
    const toggleTraining = async () => {
        try {
            if (isTraining) {
                // ÂÅúÊ≠¢Ë®ìÁ∑¥ÈÇèËºØ
                setIsTraining(false)
                setStartTime(null)
                setRLMetrics(null)

                // ÁôºÈÄÅÂÅúÊ≠¢Ë®ìÁ∑¥‰∫ã‰ª∂
                window.dispatchEvent(
                    new CustomEvent('rlTrainingStopped', {
                        detail: { engine: selectedEngine },
                    })
                )

                console.log(`‚èπÔ∏è ÂÅúÊ≠¢ ${selectedEngine.toUpperCase()} Ë®ìÁ∑¥`)
            } else {
                // ÈñãÂßãË®ìÁ∑¥ÈÇèËºØ
                setIsTraining(true)
                setStartTime(Date.now())
                console.log(`üöÄ ÈñãÂßã ${selectedEngine.toUpperCase()} Ë®ìÁ∑¥`)
            }
        } catch (error) {
            console.error('Failed to toggle training:', error)
            setError(error instanceof Error ? error.message : 'Ë®ìÁ∑¥ÊéßÂà∂Â§±Êïó')
        }
    }

    // Ëá™ÂãïÂà∑Êñ∞ÂíåÂãïÊÖãÊï∏ÊìöÊõ¥Êñ∞
    useEffect(() => {
        if (autoRefresh && !isTraining) {
            intervalRef.current = setInterval(fetchRLStatus, 5000)
            fetchRLStatus() // Á´ãÂç≥Áç≤Âèñ‰∏ÄÊ¨°
        } else if (isTraining) {
            // Ë®ìÁ∑¥ÊôÇ‰ΩøÁî®ÂãïÊÖãÊï∏ÊìöÁîüÊàê
            const updateTrainingData = () => {
                const dynamicData = generateDynamicTrainingData()
                if (dynamicData) {
                    const newMetrics: RLEngineMetrics = {
                        engine_type: selectedEngine,
                        algorithm:
                            selectedEngine === 'dqn'
                                ? 'Deep Q-Network'
                                : 'Proximal Policy Optimization',
                        environment: 'gymnasium',
                        model_status: 'training' as const,
                        ...dynamicData,
                    }
                    setRLMetrics(newMetrics)

                    // ÁôºÈÄÅÁúüÂØ¶Êï∏ÊìöÁµ¶ChartAnalysisDashboard
                    window.dispatchEvent(
                        new CustomEvent('rlMetricsUpdate', {
                            detail: {
                                engine: selectedEngine,
                                metrics: newMetrics,
                            },
                        })
                    )
                }
            }

            updateTrainingData() // Á´ãÂç≥Êõ¥Êñ∞‰∏ÄÊ¨°
            intervalRef.current = setInterval(updateTrainingData, 3000)
        } else {
            if (intervalRef.current) {
                clearInterval(intervalRef.current)
            }
        }

        return () => {
            if (intervalRef.current) {
                clearInterval(intervalRef.current)
            }
        }
    }, [
        autoRefresh,
        isTraining,
        selectedEngine,
        generateDynamicTrainingData,
        fetchRLStatus,
    ])

    // Êñ∞Â¢ûÈõôÂºïÊìéË®ìÁ∑¥ÁãÄÊÖã
    const [isDqnTraining, setIsDqnTraining] = useState(false)
    const [isPpoTraining, setIsPpoTraining] = useState(false)
    const [dqnMetrics, setDqnMetrics] = useState<RLEngineMetrics | null>(null)
    const [ppoMetrics, setPpoMetrics] = useState<RLEngineMetrics | null>(null)

    // Áõ£ËÅΩ‰æÜËá™ ChartAnalysisDashboard ÁöÑ‰∫ã‰ª∂
    useEffect(() => {
        const handleDqnToggle = (event: any) => {
            const { isTraining } = event.detail
            setIsDqnTraining(isTraining)
            if (selectedEngine === 'dqn') {
                setIsTraining(isTraining)
            }
        }

        const handlePpoToggle = (event: any) => {
            const { isTraining } = event.detail
            setIsPpoTraining(isTraining)
            if (selectedEngine === 'ppo') {
                setIsTraining(isTraining)
            }
        }

        const handleBothToggle = (event: any) => {
            const { dqnTraining, ppoTraining } = event.detail
            setIsDqnTraining(dqnTraining)
            setIsPpoTraining(ppoTraining)
            // Â¶ÇÊûúÁï∂ÂâçÈÅ∏‰∏≠ÁöÑÂºïÊìéÊ≠£Âú®Ë®ìÁ∑¥ÔºåÂâáË®≠ÂÆöË®ìÁ∑¥ÁãÄÊÖã
            if (
                (selectedEngine === 'dqn' && dqnTraining) ||
                (selectedEngine === 'ppo' && ppoTraining)
            ) {
                setIsTraining(true)
            } else if (!dqnTraining && !ppoTraining) {
                setIsTraining(false)
            }
        }

        // Ê∑ªÂä†‰∫ã‰ª∂Áõ£ËÅΩÂô®
        window.addEventListener('dqnTrainingToggle', handleDqnToggle)
        window.addEventListener('ppoTrainingToggle', handlePpoToggle)
        window.addEventListener('bothTrainingToggle', handleBothToggle)

        // Ê∏ÖÁêÜÂáΩÊï∏
        return () => {
            window.removeEventListener('dqnTrainingToggle', handleDqnToggle)
            window.removeEventListener('ppoTrainingToggle', handlePpoToggle)
            window.removeEventListener('bothTrainingToggle', handleBothToggle)
        }
    }, [selectedEngine])

    // Áç®Á´ãÁöÑË®ìÁ∑¥ÈñãÂßãÊôÇÈñìËøΩËπ§
    const [dqnStartTime, setDqnStartTime] = useState<number | null>(null)
    const [ppoStartTime, setPpoStartTime] = useState<number | null>(null)

    // Áç®Á´ãÁöÑ DQN Ë®ìÁ∑¥Êï∏ÊìöÁîüÊàê
    const generateDqnTrainingData = useCallback(() => {
        if (isDqnTraining && dqnStartTime) {
            const now = Date.now()
            const elapsed = Math.floor((now - dqnStartTime) / 1000)

            // DQN: ÊØè15ÁßíÂ¢ûÂä†1-2ÂÄãepisode
            const baseEpisodes =
                Math.floor(elapsed / 15) + Math.floor(Math.random() * 2)
            const baseReward = Math.max(
                -10,
                Math.sin(elapsed / 100) * 30 + elapsed * 0.05
            )
            const baseProgress = Math.min(100, (elapsed / 1800) * 100) // 30ÂàÜÈêòÈÅîÂà∞100%

            return {
                episodes_completed: baseEpisodes,
                average_reward: baseReward + (Math.random() - 0.5) * 4,
                current_epsilon: Math.max(0.01, 1.0 - elapsed / 1800),
                training_progress: baseProgress,
                prediction_accuracy: 0.6 + (baseProgress / 100) * 0.35,
                response_time_ms: 20 + Math.random() * 30,
                memory_usage: 512 + (baseProgress / 100) * 1024,
                gpu_utilization: 45 + Math.random() * 40,
            }
        }
        return null
    }, [isDqnTraining, dqnStartTime])

    // Áç®Á´ãÁöÑ DQN Êï∏ÊìöÊõ¥Êñ∞ÈÇèËºØ
    useEffect(() => {
        if (isDqnTraining) {
            if (!dqnStartTime) {
                setDqnStartTime(Date.now())
            }

            const updateDqnData = () => {
                const dynamicData = generateDqnTrainingData()
                if (dynamicData) {
                    const dqnMetrics: RLEngineMetrics = {
                        engine_type: 'dqn',
                        algorithm: 'Deep Q-Network',
                        environment: 'gymnasium',
                        model_status: 'training' as const,
                        ...dynamicData,
                    }
                    setDqnMetrics(dqnMetrics)

                    // ÁôºÈÄÅÁúüÂØ¶Êï∏ÊìöÁµ¶ChartAnalysisDashboard
                    window.dispatchEvent(
                        new CustomEvent('rlMetricsUpdate', {
                            detail: {
                                engine: 'dqn',
                                metrics: dqnMetrics,
                            },
                        })
                    )
                }
            }
            updateDqnData()
            const dqnInterval = setInterval(updateDqnData, 3000)
            return () => clearInterval(dqnInterval)
        } else {
            setDqnMetrics(null)
            setDqnStartTime(null)
            // ÁôºÈÄÅDQNÂÅúÊ≠¢Ë®ìÁ∑¥‰∫ã‰ª∂
            window.dispatchEvent(
                new CustomEvent('rlTrainingStopped', {
                    detail: { engine: 'dqn' },
                })
            )
        }
    }, [isDqnTraining, generateDqnTrainingData])

    // Áç®Á´ãÁöÑ PPO Ë®ìÁ∑¥Êï∏ÊìöÁîüÊàê
    const generatePpoTrainingData = useCallback(() => {
        if (isPpoTraining && ppoStartTime) {
            const now = Date.now()
            const elapsed = Math.floor((now - ppoStartTime) / 1000)

            // PPO: ÊØè12ÁßíÂ¢ûÂä†1-2ÂÄãepisode
            const baseEpisodes =
                Math.floor(elapsed / 12) + Math.floor(Math.random() * 2)
            const baseReward = Math.max(
                -8,
                Math.sin(elapsed / 80) * 35 + elapsed * 0.06
            )
            const baseProgress = Math.min(100, (elapsed / 1500) * 100) // 25ÂàÜÈêòÈÅîÂà∞100%

            return {
                episodes_completed: baseEpisodes,
                average_reward: baseReward + (Math.random() - 0.5) * 3,
                current_epsilon: Math.max(0.01, 0.9 - elapsed / 1500),
                training_progress: baseProgress,
                prediction_accuracy: 0.65 + (baseProgress / 100) * 0.32,
                response_time_ms: 18 + Math.random() * 25,
                memory_usage: 480 + (baseProgress / 100) * 1200,
                gpu_utilization: 50 + Math.random() * 35,
            }
        }
        return null
    }, [isPpoTraining, ppoStartTime])

    useEffect(() => {
        if (isPpoTraining) {
            if (!ppoStartTime) {
                setPpoStartTime(Date.now())
            }

            const updatePpoData = () => {
                const dynamicData = generatePpoTrainingData()
                if (dynamicData) {
                    const ppoMetrics: RLEngineMetrics = {
                        engine_type: 'ppo',
                        algorithm: 'Proximal Policy Optimization',
                        environment: 'gymnasium',
                        model_status: 'training' as const,
                        ...dynamicData,
                    }
                    setPpoMetrics(ppoMetrics)

                    // ÁôºÈÄÅÁúüÂØ¶Êï∏ÊìöÁµ¶ChartAnalysisDashboard
                    window.dispatchEvent(
                        new CustomEvent('rlMetricsUpdate', {
                            detail: {
                                engine: 'ppo',
                                metrics: ppoMetrics,
                            },
                        })
                    )
                }
            }
            updatePpoData()
            const ppoInterval = setInterval(updatePpoData, 3000)
            return () => clearInterval(ppoInterval)
        } else {
            setPpoMetrics(null)
            setPpoStartTime(null)
            // ÁôºÈÄÅPPOÂÅúÊ≠¢Ë®ìÁ∑¥‰∫ã‰ª∂
            window.dispatchEvent(
                new CustomEvent('rlTrainingStopped', {
                    detail: { engine: 'ppo' },
                })
            )
        }
    }, [isPpoTraining, generatePpoTrainingData])

    const getHealthStatusColor = (status: string) => {
        switch (status) {
            case 'healthy':
                return '#28a745'
            case 'warning':
                return '#ffc107'
            case 'error':
                return '#dc3545'
            case 'disabled':
                return '#6c757d'
            default:
                return '#17a2b8'
        }
    }

    const getEngineStatusIcon = (engineType: string) => {
        switch (engineType) {
            case 'dqn':
                return 'ü§ñ'
            case 'ppo':
                return '‚öôÔ∏è'
            case 'null':
                return '‚ùå'
            default:
                return '‚ùì'
        }
    }

    return (
        <div className="gymnasium-rl-monitor">
            <div className="monitor-header">
                <h3 className="monitor-title">ü§ñ Âº∫ÂåñÂ≠∏ÁøíË®ìÁ∑¥Áõ£Êéß</h3>
                <div className="header-controls">
                    <div className="environment-status">
                        <span className="status-indicator active"></span>
                        <span>Gymnasium Áí∞Â¢ÉÈÅãË°å‰∏≠</span>
                    </div>
                </div>
            </div>

            {error && <div className="error-banner">‚ö†Ô∏è {error}</div>}

            <div className="monitor-grid">
                {/* RL ÂºïÊìéÊåáÊ®ô - È°ØÁ§∫ÂÖ©ÂÄãÂºïÊìéÁöÑÊåáÊ®ô */}
                <div className="metrics-panels">
                    <div className="dqn-metrics-panel">
                        <h3>ü§ñ DQN ÂºïÊìéÊåáÊ®ô</h3>
                        <div className="metrics-grid">
                            <div className="metric-item">
                                <span className="metric-label">ÁÆóÊ≥ï:</span>
                                <span className="metric-value">
                                    Deep Q-Network
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">Ê®°ÂûãÁãÄÊÖã:</span>
                                <span
                                    className={`metric-value status-${
                                        isDqnTraining ? 'training' : 'idle'
                                    }`}
                                >
                                    {isDqnTraining ? 'training' : 'idle'}
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">
                                    Â∑≤ÂÆåÊàêÂõûÂêà:
                                </span>
                                <span className="metric-value">
                                    {isDqnTraining && dqnMetrics
                                        ? dqnMetrics.episodes_completed
                                        : 0}
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">Âπ≥ÂùáÁçéÂãµ:</span>
                                <span className="metric-value">
                                    {isDqnTraining && dqnMetrics
                                        ? dqnMetrics.average_reward.toFixed(2)
                                        : '0.00'}
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">
                                    Êé¢Á¥¢Áéá (Œµ):
                                </span>
                                <span className="metric-value">
                                    {isDqnTraining && dqnMetrics
                                        ? dqnMetrics.current_epsilon.toFixed(3)
                                        : '1.000'}
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">Ë®ìÁ∑¥ÈÄ≤Â∫¶:</span>
                                <span className="metric-value">
                                    {isDqnTraining && dqnMetrics
                                        ? dqnMetrics.training_progress.toFixed(
                                              1
                                          )
                                        : '0.0'}
                                    %
                                </span>
                                <div className="progress-bar">
                                    <div
                                        className="progress-fill dqn-fill"
                                        style={{
                                            width: `${
                                                isDqnTraining && dqnMetrics
                                                    ? dqnMetrics.training_progress
                                                    : 0
                                            }%`,
                                        }}
                                    ></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="ppo-metrics-panel">
                        <h3>‚öôÔ∏è PPO ÂºïÊìéÊåáÊ®ô</h3>
                        <div className="metrics-grid">
                            <div className="metric-item">
                                <span className="metric-label">ÁÆóÊ≥ï:</span>
                                <span className="metric-value">
                                    Proximal Policy Optimization
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">Ê®°ÂûãÁãÄÊÖã:</span>
                                <span
                                    className={`metric-value status-${
                                        isPpoTraining ? 'training' : 'idle'
                                    }`}
                                >
                                    {isPpoTraining ? 'training' : 'idle'}
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">
                                    Â∑≤ÂÆåÊàêÂõûÂêà:
                                </span>
                                <span className="metric-value">
                                    {isPpoTraining && ppoMetrics
                                        ? ppoMetrics.episodes_completed
                                        : 0}
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">Âπ≥ÂùáÁçéÂãµ:</span>
                                <span className="metric-value">
                                    {isPpoTraining && ppoMetrics
                                        ? ppoMetrics.average_reward.toFixed(2)
                                        : '0.00'}
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">Á≠ñÁï•ÊêçÂ§±:</span>
                                <span className="metric-value">
                                    {isPpoTraining && ppoMetrics
                                        ? (
                                              ppoMetrics.current_epsilon * 0.15
                                          ).toFixed(3)
                                        : '0.000'}
                                </span>
                            </div>
                            <div className="metric-item">
                                <span className="metric-label">Ë®ìÁ∑¥ÈÄ≤Â∫¶:</span>
                                <span className="metric-value">
                                    {isPpoTraining && ppoMetrics
                                        ? ppoMetrics.training_progress.toFixed(
                                              1
                                          )
                                        : '0.0'}
                                    %
                                </span>
                                <div className="progress-bar">
                                    <div
                                        className="progress-fill ppo-fill"
                                        style={{
                                            width: `${
                                                isPpoTraining && ppoMetrics
                                                    ? ppoMetrics.training_progress
                                                    : 0
                                            }%`,
                                        }}
                                    ></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* ÈÄöÁî®Á≥ªÁµ±ÊåáÊ®ô */}
                <div className="system-metrics-panel">
                    <h3>üíª Á≥ªÁµ±Ë≥áÊ∫êÊåáÊ®ô</h3>
                    <div className="metrics-grid">
                        <div className="metric-item">
                            <span className="metric-label">Áí∞Â¢É:</span>
                            <span className="metric-value">
                                {rlMetrics?.environment ||
                                    'HandoverEnvironment-v0'}
                            </span>
                        </div>
                        <div className="metric-item">
                            <span className="metric-label">È†êÊ∏¨Ê∫ñÁ¢∫Áéá:</span>
                            <span className="metric-value">
                                {(() => {
                                    const dqnAcc =
                                        isDqnTraining &&
                                        dqnMetrics?.prediction_accuracy
                                            ? dqnMetrics.prediction_accuracy
                                            : 0
                                    const ppoAcc =
                                        isPpoTraining &&
                                        ppoMetrics?.prediction_accuracy
                                            ? ppoMetrics.prediction_accuracy
                                            : 0
                                    const count =
                                        (isDqnTraining ? 1 : 0) +
                                        (isPpoTraining ? 1 : 0)
                                    return count > 0
                                        ? (
                                              ((dqnAcc + ppoAcc) / count) *
                                              100
                                          ).toFixed(1)
                                        : '0.0'
                                })()}
                                %
                            </span>
                        </div>
                        <div className="metric-item">
                            <span className="metric-label">ÈüøÊáâÊôÇÈñì:</span>
                            <span className="metric-value">
                                {(() => {
                                    const dqnResp =
                                        isDqnTraining &&
                                        dqnMetrics?.response_time_ms
                                            ? dqnMetrics.response_time_ms
                                            : 0
                                    const ppoResp =
                                        isPpoTraining &&
                                        ppoMetrics?.response_time_ms
                                            ? ppoMetrics.response_time_ms
                                            : 0
                                    const count =
                                        (isDqnTraining ? 1 : 0) +
                                        (isPpoTraining ? 1 : 0)
                                    return count > 0
                                        ? ((dqnResp + ppoResp) / count).toFixed(
                                              1
                                          )
                                        : '0.0'
                                })()}
                                ms
                            </span>
                        </div>
                        <div className="metric-item">
                            <span className="metric-label">Ë®òÊÜ∂È´î‰ΩøÁî®:</span>
                            <span className="metric-value">
                                {(() => {
                                    const dqnMem =
                                        isDqnTraining &&
                                        dqnMetrics?.memory_usage
                                            ? dqnMetrics.memory_usage
                                            : 0
                                    const ppoMem =
                                        isPpoTraining &&
                                        ppoMetrics?.memory_usage
                                            ? ppoMetrics.memory_usage
                                            : 0
                                    const count =
                                        (isDqnTraining ? 1 : 0) +
                                        (isPpoTraining ? 1 : 0)
                                    return count > 0
                                        ? ((dqnMem + ppoMem) / count).toFixed(0)
                                        : '0'
                                })()}
                                MB
                            </span>
                        </div>
                        {(isDqnTraining || isPpoTraining) && (
                            <div className="metric-item">
                                <span className="metric-label">
                                    GPU ‰ΩøÁî®Áéá:
                                </span>
                                <span className="metric-value">
                                    {(() => {
                                        const dqnGpu =
                                            isDqnTraining &&
                                            dqnMetrics?.gpu_utilization
                                                ? dqnMetrics.gpu_utilization
                                                : 0
                                        const ppoGpu =
                                            isPpoTraining &&
                                            ppoMetrics?.gpu_utilization
                                                ? ppoMetrics.gpu_utilization
                                                : 0
                                        const count =
                                            (isDqnTraining ? 1 : 0) +
                                            (isPpoTraining ? 1 : 0)
                                        return count > 0
                                            ? (
                                                  (dqnGpu + ppoGpu) /
                                                  count
                                              ).toFixed(1)
                                            : '0.0'
                                    })()}
                                    %
                                </span>
                            </div>
                        )}
                        <div className="metric-item">
                            <span className="metric-label">Ë®ìÁ∑¥ÁãÄÊÖã:</span>
                            <span className="metric-value">
                                {isDqnTraining && isPpoTraining
                                    ? 'üî¥ ÈõôÂºïÊìéË®ìÁ∑¥‰∏≠'
                                    : isDqnTraining
                                    ? 'üü¢ DQN Ë®ìÁ∑¥‰∏≠'
                                    : isPpoTraining
                                    ? 'üü† PPO Ë®ìÁ∑¥‰∏≠'
                                    : '‚ö™ ÂæÖÊ©ü'}
                            </span>
                        </div>
                    </div>
                </div>

                {/* Ë®ìÁ∑¥ËàáÁ≥ªÁµ±Êó•Ë™å */}
                <div className="logs-panel">
                    <h3>üìú Ë®ìÁ∑¥ËàáÁ≥ªÁµ±Êó•Ë™å</h3>
                    <div className="logs-container">
                        {/* Ë®ìÁ∑¥ÁãÄÊÖãÊó•Ë™å */}
                        {isDqnTraining && (
                            <div className="log-entry dqn">
                                ü§ñ [{new Date().toLocaleTimeString()}] DQN
                                ÂºïÊìéË®ìÁ∑¥ÈÄ≤Ë°å‰∏≠
                                {dqnMetrics &&
                                    ` - ÂõûÂêà: ${
                                        dqnMetrics.episodes_completed
                                    }, ÁçéÂãµ: ${dqnMetrics.average_reward.toFixed(
                                        2
                                    )}`}
                            </div>
                        )}
                        {isPpoTraining && (
                            <div className="log-entry ppo">
                                ‚öôÔ∏è [{new Date().toLocaleTimeString()}] PPO
                                ÂºïÊìéË®ìÁ∑¥ÈÄ≤Ë°å‰∏≠
                                {ppoMetrics &&
                                    ` - ÂõûÂêà: ${
                                        ppoMetrics.episodes_completed
                                    }, ÁçéÂãµ: ${ppoMetrics.average_reward.toFixed(
                                        2
                                    )}`}
                            </div>
                        )}
                        {!isDqnTraining && !isPpoTraining && (
                            <div className="log-entry idle">
                                ‚è∏Ô∏è [{new Date().toLocaleTimeString()}]
                                ÊâÄÊúâË®ìÁ∑¥ÂºïÊìéËôïÊñºÂæÖÊ©üÁãÄÊÖã
                            </div>
                        )}

                        {/* Á≥ªÁµ±ÁãÄÊÖãÊó•Ë™å */}
                        <div className="log-entry success">
                            ‚úÖ [{new Date().toLocaleTimeString()}] Gymnasium
                            Áí∞Â¢ÉÈÅãË°åÊ≠£Â∏∏
                        </div>
                        <div className="log-entry info">
                            üåê [{new Date().toLocaleTimeString()}] API ÈÄ£Êé•ÁãÄÊÖã:{' '}
                            {backendConnected
                                ? 'Â∑≤ÈÄ£Êé•ÁúüÂØ¶ÂæåÁ´Ø'
                                : '‰ΩøÁî®Ê®°Êì¨Êï∏Êìö'}
                        </div>
                        {backendConnected && (
                            <div className="log-entry success">
                                üîó [{new Date().toLocaleTimeString()}] NetStack
                                API ÂÅ•Â∫∑Ê™¢Êü•ÈÄöÈÅé ({API_BASE}/health)
                            </div>
                        )}

                        {/* Ë®ìÁ∑¥ÈÄ≤Â∫¶Êó•Ë™å */}
                        {(dqnMetrics?.episodes_completed || 0) > 0 && (
                            <div className="log-entry training">
                                üéØ [{new Date().toLocaleTimeString()}] DQN
                                Ë®ìÁ∑¥ÈÄ≤Â∫¶:{' '}
                                {dqnMetrics!.training_progress.toFixed(1)}% ÂÆåÊàê
                            </div>
                        )}
                        {(ppoMetrics?.episodes_completed || 0) > 0 && (
                            <div className="log-entry training">
                                üéØ [{new Date().toLocaleTimeString()}] PPO
                                Ë®ìÁ∑¥ÈÄ≤Â∫¶:{' '}
                                {ppoMetrics!.training_progress.toFixed(1)}% ÂÆåÊàê
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    )
}

export default GymnasiumRLMonitor
