# 衛星處理系統 - 測試專用 Makefile
# 🧪 TDD重構測試自動化命令

.PHONY: help test-runner test-sgp4 test-fast test-coverage check lint performance dev-check test-status clean-test

# 預設目標
.DEFAULT_GOAL := help

# 顏色定義
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
NC = \033[0m

help: ## 顯示所有可用測試命令
	@echo "$(BLUE)🧪 衛星處理系統 - 測試命令$(NC)"
	@echo "================================================================"
	@echo "$(YELLOW)test-runner$(NC)      執行完整測試套件 (推薦)"
	@echo "$(YELLOW)test-sgp4$(NC)        僅執行SGP4軌道引擎測試"
	@echo "$(YELLOW)test-fast$(NC)        快速測試 (僅關鍵測試)"
	@echo "$(YELLOW)test-coverage$(NC)    生成測試覆蓋率報告"
	@echo "$(YELLOW)check$(NC)            執行預提交檢查"
	@echo "$(YELLOW)performance$(NC)      執行性能基準測試"
	@echo "$(YELLOW)dev-check$(NC)        開發檢查 (預提交 + 核心測試)"
	@echo "$(YELLOW)test-status$(NC)      顯示測試環境狀態"
	@echo ""

# 測試相關命令
test-runner: ## 執行完整測試套件
	@echo "$(BLUE)🚀 執行完整測試套件$(NC)"
	@./scripts/test-runner.sh

test-sgp4: ## SGP4測試
	@echo "$(BLUE)🛰️ 執行SGP4測試$(NC)"
	python -m pytest tests/unit/algorithms/test_sgp4_orbital_engine.py -v

test-fast: ## 快速測試
	@echo "$(BLUE)⚡ 快速測試$(NC)"
	python -m pytest tests/unit/algorithms/test_sgp4_orbital_engine.py::TestSGP4OrbitalEngine::test_tle_epoch_time_usage_mandatory -v

test-coverage: ## 覆蓋率測試
	@echo "$(BLUE)📊 生成覆蓋率報告$(NC)"
	python -m pytest tests/unit/ --cov=src --cov-report=html:tests/reports/coverage_html --cov-report=term-missing
	@echo "$(GREEN)📈 覆蓋率報告: tests/reports/coverage_html/index.html$(NC)"

check: ## 預提交檢查
	@echo "$(BLUE)🛡️ 執行預提交檢查$(NC)"
	@./scripts/pre-commit-check.sh

performance: ## 性能測試
	@echo "$(BLUE)⚡ 性能基準測試$(NC)"
	python -m pytest tests/unit/algorithms/test_sgp4_orbital_engine.py::TestSGP4OrbitalEngine::test_sgp4_calculation_performance -v

dev-check: check test-sgp4 ## 開發檢查
	@echo "$(GREEN)🎉 開發檢查完成！$(NC)"

test-status: ## 測試狀態
	@echo "$(BLUE)📊 測試環境狀態$(NC)"
	@echo "================================================================"
	@echo "Python版本: $$(python --version)"
	@echo "pytest版本: $$(python -m pytest --version 2>/dev/null || echo '未安裝')"
	@echo "TLE數據文件: $$(ls data/tle_data/starlink/tle/*.tle 2>/dev/null | wc -l) 個"
	@echo "Git hooks: $$([ -x ../.git/hooks/pre-commit ] && echo '已配置' || echo '未配置')"
	@echo "================================================================"

clean-test: ## 清理測試文件
	@echo "$(BLUE)🧹 清理測試文件$(NC)"
	rm -rf tests/reports/ .pytest_cache/ __pycache__/ src/__pycache__/ tests/__pycache__/ .coverage
	find . -name "*.pyc" -delete 2>/dev/null || true
	@echo "$(GREEN)✅ 清理完成$(NC)"
